<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
<declaration>
// This example models a simple system where a worker interacts with
// a hammer to hit a stream of nails. The worker can rest or work,
// and while working it can hit a nail or get the next nail. Timing
// constraints specify when and for how long each of can these actions
// be performed.


int nails = 0; // number of completed nails

// @Limits
const int sessionTime = 100; // Total time that the worker can work before stopping 
const bool countNails = true; // If the nails should be counted. If so, the system will have an infinite amount of states. 
const int totalNails = 0; // Total number of new nails available (when counting nails) 
const bool infiniteNails = true; // If there is no bound on the number of nails (can cause overflows) 
const int reactTime = 20; // Maximum time that the worker can take to hit or place a new nail 

// @Channels
broadcast chan work; // worker starts working
broadcast chan rest; // worker stops working
 chan hit; // worker hits a nail with the hammer
 chan newNail; // worker places a new nail

</declaration>
<template>
<name>Worker</name>
<declaration>clock t, session;

</declaration>
<location id="id0" x="102" y="-34">
<name x="93" y="-8">Work</name>
<label kind="invariant" x="93" y="17">session&lt;=sessionTime &amp;&amp;
t&lt;=reactTime</label>
</location>
<location id="id1" x="-127" y="-34">
<name x="-144" y="-8">Rest</name>
<label kind="invariant" x="-178" y="17">session&lt;=sessionTime-reactTime</label>
</location>
<init ref="id1"/>
<transition id="id2">
<source ref="id0"/>
<target ref="id0"/>
<label kind="guard" x="59" y="-136">t&gt;=reactTime</label>
<label kind="synchronisation" x="76" y="-119">newNail!</label>
<label kind="assignment" x="85" y="-93">t:=0</label>
<nail x="76" y="-93"/>
<nail x="136" y="-93"/>
</transition>
<transition id="id3">
<source ref="id0"/>
<target ref="id1"/>
<label kind="guard" x="-93" y="-51">session&gt;=sessionTime</label>
<label kind="synchronisation" x="-34" y="-25">rest!</label>
<label kind="assignment" x="-59" y="-8">session:=0</label>
<nail x="76" y="-25"/>
<nail x="-93" y="-25"/>
</transition>
<transition id="id4">
<source ref="id0"/>
<target ref="id0"/>
<label kind="guard" x="178" y="-76">t&gt;=reactTime-5</label>
<label kind="synchronisation" x="178" y="-59">hit!</label>
<label kind="assignment" x="178" y="-42">t:=0</label>
<nail x="170" y="-76"/>
<nail x="170" y="-8"/>
</transition>
<transition id="id5">
<source ref="id1"/>
<target ref="id0"/>
<label kind="synchronisation" x="-34" y="-110">work!</label>
<label kind="assignment" x="-34" y="-85">t:=0</label>
<nail x="-42" y="-85"/>
<nail x="17" y="-85"/>
</transition>
</template>
<template>
<name>Hammer</name>
<location id="id6" x="212" y="0">
<name x="178" y="25">NailDone</name>
</location>
<location id="id7" x="51" y="0">
<name x="17" y="25">NailHalf</name>
</location>
<location id="id8" x="-51" y="0">
<name x="-76" y="25">NailUp</name>
</location>
<init ref="id8"/>
<transition id="id9">
<source ref="id6"/>
<target ref="id8"/>
<label kind="guard" x="-51" y="-85">infiniteNails || nails&lt;=totalNails</label>
<label kind="synchronisation" x="42" y="-59">newNail?</label>
<nail x="212" y="-59"/>
<nail x="-51" y="-59"/>
</transition>
<transition id="id10">
<source ref="id7"/>
<target ref="id6"/>
<label kind="synchronisation" x="110" y="-25">hit?</label>
<label kind="assignment" x="93" y="0">countNails ?
nails++ :
true</label>
</transition>
<transition id="id11">
<source ref="id8"/>
<target ref="id7"/>
<label kind="synchronisation" x="-17" y="-25">hit?</label>
</transition>
</template>
<system>// Place template instantiations here.
W = Worker();
H = Hammer();

// List one or more processes to be composed into a system.
system W, H;
</system>
<queries>
<query>
  <formula>A[]!deadlock</formula>
  <comment>No deadlocks</comment>
</query>
<query>
  <formula>A[] W.Rest</formula>
  <comment>The worker is always resting</comment>
</query>
<query>
  <formula>E&lt;&gt; H.NailDone</formula>
  <comment>The hammer can finish a nail</comment>
</query>
<query>
  <formula>A&lt;&gt; H.NailDone</formula>
  <comment>The hammer must complete a nail</comment>
</query>
<query>
  <formula>W.Work --&gt; W.Rest</formula>
  <comment>The worker must be able to rest after working</comment>
</query>
<query>
  <formula>A&lt;&gt; nails&gt;=x</formula>
  <comment>The hammer must complete at least x nails</comment>
</query>
<query>
  <formula>E&lt;&gt; nails&gt;=x</formula>
  <comment>The hammer can complete at least x nails</comment>
</query>
</queries>
</nta>